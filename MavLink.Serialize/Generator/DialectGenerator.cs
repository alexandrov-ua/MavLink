using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace MavLink.Serialize.Generator;

[Generator]
public class DialectGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
    }
    
    public static ClassDeclarationSyntax GetTargetForGeneration(GeneratorSyntaxContext context)
    {
        var classDeclarationSyntax = (ClassDeclarationSyntax)context.Node;
        return classDeclarationSyntax;
    }

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxContextReceiver is SyntaxReceiver receiver)
        {
            string source = $@"// <auto-generated/>
using System;
using MavLink.Serialize.Messages;
using MavLink.Serialize.Dialects;

namespace {receiver.Roots.First().NameSpace}
{{
    public partial class MinimalDialect : IDialect
    {{
        public IPocket<IPayload> CreatePocket(uint messageId, bool isMavlinkV2, byte sequenceNumber, byte systemId, byte componentId, ReadOnlySpan<byte> payload)
        {{
            //{receiver.Roots.First().FilePath}
            //{receiver.Roots.First().DisplayName}
            //{receiver.Roots.First().NameSpace}
            throw new NotImplementedException();
        }}

        public static IDialect Default = new MinimalDialect();
    }}
}}
";
            context.AddSource($"MinimalDialect.g.cs", source);
            
        }
    }
}