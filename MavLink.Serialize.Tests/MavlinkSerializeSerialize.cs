using FluentAssertions;
using MavLink.Serialize.Dialects.Test;

namespace MavLink.Serialize.Tests;

public class MavlinkSerializeSerialize
{
    [Fact]
    public void AttitudePocket()
    {
        var data = new byte[] //Altitude
        {
            0xfd, 0x1c, 0x00, 0x00, 0x4c, 0x01, 0x01, 0x1e, 0x00, 0x00, 0xcd, 0xd1, 0x23, 0x00, 0x4e, 0xd2, 0x90, 0xb9,
            0xef, 0x64, 0x99, 0xb9, 0x00, 0x30, 0x1f, 0xc0, 0x84, 0x78, 0x9a, 0xb9, 0xe4, 0x68, 0xd6, 0xb9, 0xfa, 0xdb,
            0x3e, 0xba, 0x64, 0xfa
        };

        var pocket = MavlinkSerialize.Deserialize(data, TestDialect.Default);
        var buffer = new byte[300];
        MavlinkSerialize.Serialize(pocket, buffer, out var written);

        var result = buffer.AsSpan().Slice(0, written).ToArray();

        Assert.Equal(data, result);
    }

    [Fact]
    public void SysTimePocket()
    {
        var data = new byte[] //SysTime
        {
            0xfd, 0x0b, 0x00, 0x00, 0x32, 0x01, 0x01, 0x02, 0x00, 0x00, 0xb1, 0x6e, 0x91, 0x93, 0xb2, 0x1a, 0x06, 0x00,
            0xc8, 0x55, 0x23, 0xF9, 0x4A
        };
        
        var pocket = MavlinkSerialize.Deserialize(data, TestDialect.Default);
        var buffer = new byte[300];
        MavlinkSerialize.Serialize(pocket, buffer, out var written);

        var result = buffer.AsSpan().Slice(0, written).ToArray();

        Assert.Equal(data, result);
    }

    [Fact]
    public void SysStatusPocket()
    {
        var data = new byte[]
        {
            0xfd, 0x1f, 0x00, 0x00, 0x38, 0x01, 0x01, 0x01, 0x00, 0x00, 0x2f, 0xfc, 0x71, 0x53, 0x2f, 0xfc, 0x61, 0x53,
            0x2f, 0xfc, 0x71, 0x57, 0x00, 0x00, 0x38, 0x31, 0xfa, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x5b, 0xee, 0x50
        };
        
        var pocket = MavlinkSerialize.Deserialize(data, TestDialect.Default);
        var buffer = new byte[300];
        MavlinkSerialize.Serialize(pocket, buffer, out var written);

        var result = buffer.AsSpan().Slice(0, written).ToArray();

        Assert.Equal(data, result);
    }

    [Fact]
    public void CommandIntPocket()
    {
        var data = new byte[]
        {
            0xfd, 0x20, 0x00, 0x00, 0xdb, 0xff, 0xbe, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x80, 0x3f,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x92, 0x90, 0xec, 0xea, 0x06, 0x13, 0xe9, 0x58, 0xa4, 0xa0,
            0x13, 0x44, 0xc0, 0x00, 0x01, 0x01, 0x1f, 0x85,
        };
        
        var pocket = MavlinkSerialize.Deserialize(data, TestDialect.Default);
        var buffer = new byte[300];
        MavlinkSerialize.Serialize(pocket, buffer, out var written);

        var result = buffer.AsSpan().Slice(0, written).ToArray();

        Assert.Equal(data, result);
    }
}