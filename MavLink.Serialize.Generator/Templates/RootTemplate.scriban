using System;
using MavLink.Serialize;
using MavLink.Serialize.Dialects;
using MavLink.Serialize.Messages;
using System.Collections.Generic;
{{~ for using in Usings ~}}
using {{ using }};
{{~ end ~}}

namespace {{ Namespace }};

public partial class {{ ClassName }} : IDialect
{
    {{~ for include in Includes ~}}
    private IDialect _{{~ include | string.replace "." "" ~}};
    {{~ end ~}}
    public static IDialect Create(
    {{- for include in Includes -}}
    IDialect {{ include | string.replace "." "" -}}
    {{- if !for.last -}},{{- end -}}
    {{- end -}})
    {
        var dialect = new {{ ClassName }}();
        {{~ for include in Includes ~}}
        dialect._{{~ include | string.replace "." "" }} = {{ include | string.replace "." "" ~}};
        {{~ end ~}}
        return dialect;
    }
  
    
    public static IDialect Default = {{ ClassName }}.Create(
    {{- for dep in DialectDependencies -}}
    {{- dep -}}.Default
    {{- if !for.last -}},{{- end -}}
    {{- end -}}
    );
    
    public string Name => "{{ DialectName }}";

    public IPocket<IPayload>? CreatePocket(uint messageId, bool isMavlinkV2, byte sequenceNumber,
        byte systemId, byte componentId, ReadOnlySpan<byte> payload)
    {
        return messageId switch
        {
            {{~ for message in Messages ~}}
            {{ message.Id }} => new {{ to_pascal_case message.Name }}Pocket(isMavlinkV2, sequenceNumber, systemId, componentId, {{ to_pascal_case message.Name }}Payload.Deserialize(payload)),
            {{~ end ~}}
            _ => {{ for include in Includes -}}
                 _{{- include | string.replace "." "" -}}.CreatePocket(messageId, isMavlinkV2, sequenceNumber, systemId, componentId, payload)
                 ?? {{ end -}}null
        };
    }
    {{~ for enum in HiddenEnums ~}}
    /// <summary>
    /// {{ string.strip_newlines enum.Description }}
    /// </summary>
    {{ if enum.IsBitmask }}
    [Flags]
    {{ end -}}
    public enum {{ to_pascal_case enum.Name }} : uint
    {
        {{~ for item in enum.Items ~}}
        /// <summary>
        /// {{ string.strip_newlines item.Description }}
        /// </summary>
        {{ item.Name }} = {{ item.Index }},
        {{~ end ~}}
    }
    {{~ end ~}}
}

#region Enums

{{~ for enum in GlobalEnums ~}}
/// <summary>
/// {{ string.strip_newlines enum.Description }}
/// </summary>
{{ if enum.IsBitmask }}
[Flags]
{{ end -}}
public enum {{ to_pascal_case enum.Name }} : uint
{
    {{~ for item in enum.Items ~}}
    /// <summary>
    /// {{ string.strip_newlines item.Description }}
    /// </summary>
    {{ item.Name }} = {{ item.Index }},
    {{~ end ~}}
}
{{~ end ~}}

#endregion

#region Messages

{{~ for message in Messages ~}}
{{ messageName = to_pascal_case message.Name }}
public class {{ messageName }}Pocket : Pocket<{{ messageName }}Payload>
{
    public {{ messageName }}Pocket(bool isMavlink2, byte sequenceNumber, byte systemId, byte componentId,
        {{ messageName }}Payload payload) : base(isMavlink2, sequenceNumber, systemId, componentId, payload)
    {
    }

    public override uint MessageId => {{ message.Id }};
    public override string MessageName => "{{ message.Name }}";
    public override int GetMaxByteSize() => Payload.GetMaxByteSize() + 12;

    public override byte GetChecksumExtra() => {{ message.ChecksumExtra }};
}

public class {{ messageName }}Payload : IPayload<{{ messageName }}Payload>, IPayload
{
    {{~ for item in message.Items ~}}
    /// <summary>
    /// {{ string.strip_newlines item.Description }}
    {{~ if item.Type.IsArray ~}}
    /// Array length: {{ item.Type.ArrayLength }}
    {{~ end ~}}
    /// </summary>
    {{~ if item.Type.IsEnum ~}}
    public {{ item.Type.IsHidden ? ClassName + "." : "" -}}{{ to_pascal_case item.Type.Enum }} {{ to_pascal_case item.Name }} { get; init; }
    {{~ else if item.Type.IsString ~}}
    public {{ item.Type.CsType }} {{ to_pascal_case item.Name }} { get; init; }
    {{~ else if item.Type.IsArray ~}}
    public {{ item.Type.CsType }}[] {{ to_pascal_case item.Name }} { get; init; }
    {{~ else ~}}
    public {{ item.Type.CsType }} {{ to_pascal_case item.Name }} { get; init; }
    {{~ end ~}}
    {{~ end ~}}

    public static {{ messageName }}Payload Deserialize(ReadOnlySpan<byte> span)
    {
        var payload = new {{ messageName }}Payload(){
            {{~ for item in message.Items ~}}
            {{~ if item.Type.IsEnum ~}}
            {{ to_pascal_case item.Name }} = ({{ item.Type.IsHidden ? ClassName + "." : "" -}}{{ to_pascal_case item.Type.Enum }})BitConverterHelper.Read<{{ item.Type.CsType }}>(ref span),
            {{~ else if item.Type.IsString ~}}
            {{ to_pascal_case item.Name }} = BitConverterHelper.ReadString({{ item.Type.ArrayLength }}, ref span),
            {{~ else if item.Type.IsArray ~}}
            {{ to_pascal_case item.Name }} = BitConverterHelper.ReadArray<{{ item.Type.CsType }}>(new {{ item.Type.CsType }}[{{ item.Type.ArrayLength }}], ref span),
            {{~ else ~}}
            {{ to_pascal_case item.Name }} = BitConverterHelper.Read<{{ item.Type.CsType }}>(ref span),
            {{~ end ~}}
            {{~ end ~}}
        };
        return payload;
    }

    public static void Serialize({{ messageName }}Payload payload, Span<byte> span)
    {
        payload.Serialize(span);
    }

    public void Serialize(Span<byte> span)
    {
        {{~ for item in message.Items ~}}
        {{~ if item.Type.IsEnum ~}}
        BitConverterHelper.Write(({{ item.Type.CsType }}){{ to_pascal_case item.Name}}, ref span);
        {{~ else if item.Type.IsString ~}}
        BitConverterHelper.WriteString({{ to_pascal_case item.Name}}, {{ item.Type.ArrayLength }}, ref span);
        {{~ else if item.Type.IsArray ~}}
        BitConverterHelper.WriteArray({{ to_pascal_case item.Name}}, ref span);
        {{~ else ~}}
        BitConverterHelper.Write({{ to_pascal_case item.Name}}, ref span);
        {{~ end ~}}
        {{~ end ~}}
    }

    public int GetMaxByteSize() => {{ message.Size }};
}

{{~ end ~}}

#endregion

#region Commands

public static class {{ ClassName }}CommandProviderExtensions
{
    {{~ for command in Commands ~}}
    /// <summary>
    /// {{ string.strip_newlines command.Description }}
    /// </summary>
    /// <param name="commandProvider"></param>
    {{~ for parameter in command.NotEmptyParameters ~}}
    /// <param name="{{ parameter.ParameterName }}"> {{ string.strip_newlines parameter.Value }}</param>
    {{~ end ~}}
    public static IPocket<T> Create{{ to_pascal_case command.EnumValue }}<T>(this ICommandProvider<T> commandProvider 
        {{- for parameter in command.NotEmptyParameters -}}
        ,{{- parameter.Type }} {{ parameter.ParameterName -}}
        {{- end -}}
        ) 
        where T: IPayload
    {
        return commandProvider.Create((uint){{ command.FullEnumValueName }}, (t) => t switch
        {
            {{~ for parameter in command.Parameters ~}}
            {{~ if parameter.IsEmpty ~}}
            {{ parameter.Index }} => 0f,
            {{~ else if parameter.IsEnum ~}}
            {{ parameter.Index }} => (float){{ parameter.ParameterName }},
            {{~ else ~}}
            {{ parameter.Index }} => {{ parameter.ParameterName }},
            {{~ end ~}}
            {{~ end ~}}
            _ => 0f
        });
    }
    {{~ end ~}}
}

#endregion